//1
#include <mpi/mpi.h>
#include <stdio.h>
#include <string.h>

void toggle(int n, char* word){
	for(int i = 0; i<n; i++){
		if(word[i]>='a' && word[i]<='z'){
			word[i] -= 32;
		}
		else if(word[i]>='A' && word[i]<='Z'){
			word[i] += 32;
		}
	}
}


int main(int argc, char* argv[]){
	int rank, size;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	char word[50];
	int length;
	if(rank == 0){
		printf("Enter the word to be sent : ");
		scanf("%s", word);
		length = strlen(word);
		printf("Before toggle : %s\n", word);
		MPI_Ssend(&length, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
		MPI_Ssend(word, length, MPI_CHAR, 1, 1, MPI_COMM_WORLD);
		MPI_Recv(word, length, MPI_CHAR, 1, 2, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		printf("After toggle : %s\n", word);
	}
	else{
		MPI_Recv(&length, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE );
		MPI_Recv(word, length, MPI_CHAR, 0, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		toggle(length, word);
		MPI_Ssend(word, length, MPI_CHAR, 0, 2, MPI_COMM_WORLD);
	}
	MPI_Finalize();
	return 0;
}

//2

#include <mpi/mpi.h>
#include <stdio.h>
#include <string.h>

int main(int argc, char* argv[]){
	int rank, size, num;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	if(rank == 0){
		for(int i = 1; i<size; i++){
			MPI_Send(&i, 1, MPI_INT, i, i, MPI_COMM_WORLD);
		}
	}
	else{
		MPI_Recv(&num, 1, MPI_INT, 0, rank, MPI_COMM_WORLD, MPI_STATUS_IGNORE );
		printf("In process %d, number sent is %d\n", rank, num);
	}
	MPI_Finalize();
	return 0;
}


//3

#include <mpi/mpi.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]){
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0){
        int array[size-1];
        printf("Enter %d elements : ", size-1);
        for(int i = 0; i<size-1; i++){
            scanf("%d", &array[i]);
        }
        int buffer_size = MPI_BSEND_OVERHEAD + sizeof(int)*size-1;
        char *buffer = (char*)malloc(buffer_size);
        MPI_Buffer_attach(buffer, buffer_size);
        for(int i = 0; i<size-1; i++){
            MPI_Bsend(&array[i], 1, MPI_INT, i+1, i+1, MPI_COMM_WORLD);
        }
        MPI_Buffer_detach(&buffer, &buffer_size);
    }
    else{
        int num;
        MPI_Recv(&num, 1, MPI_INT, 0, rank, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        if (rank & 1){
            printf("In process : %d, number of array : %d, cube value : %d\n", rank, num, num * num * num);
        }
        else{
        printf("In process : %d, number of array : %d, square value : %d\n", rank, num, num * num);
        }
    }
    MPI_Finalize();
    return 0;
}

//4

#include <mpi/mpi.h>
#include <stdio.h>

int main(int argc, char *argv[]){
	int rank, size;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	int num;
	if(rank == 0){
		printf("Enter a number : ");
		scanf("%d", &num);
		MPI_Send(&num, 1, MPI_INT, rank+1, rank+1, MPI_COMM_WORLD);
		MPI_Recv(&num, 1, MPI_INT, size-1, rank, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		printf("In process %d, value is : %d\n", rank, num);
	}
	else{
		MPI_Recv(&num, 1, MPI_INT, rank-1, rank, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		printf("In process %d, value is : %d\n", rank, num);
		num++;
		MPI_Send(&num, 1, MPI_INT, (rank+1)%size, (rank+1)%size, MPI_COMM_WORLD);
	}
	MPI_Finalize();
	return 0;
}

//sample
#include "mpi.h"
#include <stdio.h>

int main(int argc, char *argv[]){
	int rank, size, x;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Status status;
	if(rank == 0){
		printf("Enter a value in master process: ");
		scanf("%d", &x);
		MPI_Send(&x, 1, MPI_INT, 1, 1, MPI_COMM_WORLD);
		fprintf(stdout, "I have sent %d from process 0\n", x);
		fflush(stdout);
	}
	else{
		MPI_Recv(&x, 1, MPI_INT, 0, 1, MPI_COMM_WORLD, &status);
		fprintf(stdout, "I have received %d in process 1\n", x);
		fflush(stdout);
	}
	MPI_Finalize();
	return 0;
}